  软件开发的复杂性通常有很多原因。但是问题领域本身的那些错综复杂的细节才是这些复杂性的核心所在。正如你想讲复杂的人类活动自动化，那么你的软件就避免不了这些复杂性。你唯一能做的就是控制它。
  控制复杂性的关键就是一个好的领域模型，一个穿透事物表面，去描绘事物深层结构的领域模型，这种领域模型就像是提供给开发者的杠杆。一个好的领域模型不容易建立，一旦建立，将是依据价值的。能做到的人已经很少了，何况它还很难言传。
  Eric Evans就是少数能建立良好领域模型的人。我知道这些是因为我们曾经是同事。我不止一次的发现这个家伙比我更优秀。我们共事的时间虽然很短，但是从那以后我们就建立了长期的联系。而我也是一点一点看着这本书被孕育出来的。
这样的等待很值得。
  这本书有着伟大的目标：去描绘和建立一份关于领域建模艺术的词汇表；去提供可以解释领域模型，去传授领域建模技巧的参照标准；这是一本能给我很多成形的新想法的书，更令我惊奇的事，就连一些建模高手也能从这本书中获得许多新的想法。
  Eric还巩固了我们这些年学过的许多知识。首先，在领域建模中，你不能讲概念和实现分开。一个高效的领域建模者不仅仅能要和一个会计在白板上写写画画，还要能和一个程序员一起搞搞Java。大体上，这是真的，因为如果不考虑实践，你肯定建立不出一个有用的概念模型。但是更主要的原因是：领域模型最伟大的价值在于它提供了通用语言，而通用语言可以将领域专家和技术人员紧密的联系在一起。
  另一个你能从这本书中学到的是，领域模型绝对不是先建模，再实现。像许多人一样，我也开始拒绝”先设计，然后开发“的分步骤想法。Eric所传授的经验则是：一个强有力的领域模型会不断迭代，那些顶尖的建模者也会发现他们最好的想法往往都是在上一个版本的发布之后。
  我认为，我也希望这本书成为一本极具影响力的书。一本会在教授人们如何使用一个有用工具的同时，赋予这个非常棘手的领域以条理性和完整性。无论你使用的那种语言，部署在何种环境，领域模型都将在控制软件开发领域举足轻重。
  最后一点，也是最重要的一点，我最为崇拜的一点，Eric从不害怕讲述他经历的失败。很多作者都习惯于营造一种无趣的全能手氛围，但Eric却在表明他像我们一样，品尝过成功的滋味，也品尝过失败的滋味。重要的是他可以从成功失败中都有所收益，对读者来说更重要的事是，Eric一直在传授这些经验。

Martin Fowler
2003.04